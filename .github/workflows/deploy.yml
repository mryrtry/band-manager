name: CI / CD — Build → Test → Deploy

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch: { }

env:
  REMOTE_HOST: se.ifmo.ru
  REMOTE_PORT: 2222
  REMOTE_USER: s409483
  REMOTE_DIR: ~/BandManager
  REMOTE_JAR: ~/BandManager/BandManager.jar
  REMOTE_LOG: ~/BandManager/band-manager.log
  JAR_NAME: BandManager-0.1.jar

jobs:
  build:
    name: Build (Maven package)
    runs-on: ubuntu-latest
    outputs:
      jar-path: ${{ steps.upload.outputs.artifact-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Build project (skip tests)
        run: mvn -B clean package -DskipTests

      - name: Upload built jar as artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: bandmanager-jar
          path: target/${{ env.JAR_NAME }}

  test:
    name: Run tests (Maven)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Download built jar (for reference)
        uses: actions/download-artifact@v4
        with:
          name: bandmanager-jar
          path: ./artifact

      - name: Run tests only (no rebuild)
        run: mvn -B test

  deploy:
    name: Deploy to se.ifmo.ru
    runs-on: ubuntu-latest
    needs: [ build, test ]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Download built jar
        uses: actions/download-artifact@v4
        with:
          name: bandmanager-jar
          path: ./artifact

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Upload JAR via plain scp
        run: |
          mkdir -p ./artifact_tmp
          cp ./artifact/${JAR_NAME} ./artifact_tmp/
          scp -P ${{ env.REMOTE_PORT }} -i ${{ secrets.DEPLOY_KEY }} ./artifact_tmp/${JAR_NAME} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:${{ env.REMOTE_JAR }}

      - name: Stop old app and start new one via SSH
        run: |
          ssh -i ${{ secrets.DEPLOY_KEY }} -p ${{ env.REMOTE_PORT }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "\
            set -e; \
            APP_DIR=\$HOME/BandManager; \
            APP_JAR=\$APP_DIR/BandManager.jar; \
            LOG_FILE=\$APP_DIR/band-manager.log; \
            mkdir -p \$APP_DIR; \
            PID=\$(pgrep -f \$APP_JAR || true); \
            if [ -n \"\$PID\" ]; then \
              echo 'Stopping old process' \$PID; \
              kill \$PID || true; \
              sleep 3; \
              if ps -p \$PID > /dev/null 2>&1; then \
                echo 'SIGKILL ' \$PID; \
                kill -9 \$PID || true; \
              fi; \
            fi; \
            echo 'Starting new app...'; \
            nohup java -jar \$APP_JAR --spring.profiles.active=prod > \$LOG_FILE 2>&1 & \
            sleep 5; \
            pgrep -f \$APP_JAR > /dev/null && echo '✅ App started' || (echo '❌ App failed' && exit 1) \
          "
